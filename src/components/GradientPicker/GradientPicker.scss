@import '../../styles/common';

.CardWrapper {
  width: 300px;
}

.GradientPicker {
  position: relative;
  width: 30rem;
  overflow: hidden;
}

.AnglePicker {
  width: 100%;
}

.Controls {
  padding: spacing(tight);
}

.Preview {
  position: relative;
  display: block;
  width: 100%;
  height: 80px;
  overflow: hidden;
  border-radius: 0.8rem 0.8rem 0 0;
  background: repeating-conic-gradient(
      var(--p-surface) 0% 25%,
      var(--p-surface-neutral-subdued) 0% 50%
    )
    50% / #{spacing() spacing()};
  .foreground {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-radius: 0.8rem 0.8rem 0 0;
  }

  &:hover {
    > .circle {
      opacity: 0.6;
      transform: scale(1);
    }
  }

  .circle {
    cursor: pointer;
    position: relative;
    top: 3px;
    z-index: 99;
    margin: 0 auto;
    transform: scale(0.8);
    height: 75px;
    width: 75px;

    transition: duration(slow) easing();
    opacity: 0.2;
  }
}

.TypePicker {
  margin-bottom: spacing(tight);
}

.OrientationPicker {
  width: 100%;
  margin-bottom: spacing(tight);
}

.StopPicker {
  margin-bottom: spacing(base);
}

.ColorPicker {
  width: 100%;
}

.LinearOrientationWrapper {
  width: 100%;
  display: flex;
}

.LinearOrientationCustomInput {
  @include text-style-input;
  position: relative;
  display: block;
  flex: 1 1 0%;
  width: 100%;
  min-width: 0;
  margin: 0;
  background: none;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  appearance: none;
  caret-color: var(--p-text);
  color: var(--p-text);
  @include focus-ring($border-width: border-width());
  background-color: var(--p-surface);
  border: 1px solid var(--p-border-subdued);
  border-top-color: var(--p-border-shadow);
  border-radius: var(--p-border-radius-base);
}

.LinearOrientationButton {
  > button {
    padding-left: rem(13.5px);
    padding-right: rem(14px);
  }
}
.Rotate45 {
  > span {
    transform: rotate(45deg);
  }
}

.Rotate90 {
  > span {
    transform: rotate(90deg);
  }
}

.Rotate135 {
  > span {
    transform: rotate(135deg);
  }
}

.Rotate180 {
  > span {
    transform: rotate(180deg);
  }
}
